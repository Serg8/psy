{"version":3,"sources":["components/Develop/Develop.module.scss","components/Header/Header.module.scss","components/Footer/Footer.module.scss","components/Header/Header.tsx","components/Footer/Footer.tsx","components/Develop/Develop.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","classes","header","Footer","footer","Develop","useState","editMode","setEditMode","status","setStatus","useEffect","wrapperDevelop","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","btn","btnSuccess","btnDelete","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4EACAA,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,IAAM,qBAAqB,WAAa,4BAA4B,UAAY,6B,mBCAnJD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,OAAS,yB,uJCeZC,EAbA,WACX,OACI,4BAAQC,UAAWC,IAAQC,QACvB,qCACA,6BACI,4BACI,wC,gBCELC,EARA,WACX,OACI,4BAAQH,UAAWC,IAAQG,QAA3B,W,uBC4DOC,EA9DC,WAAM,MAQYC,oBAAS,GARrB,mBAQbC,EARa,KAQHC,EARG,OASQF,mBAAS,SATjB,mBASbG,EATa,KASLC,EATK,KAYlBC,qBAAW,cAER,IAuBH,OACI,yBAAKX,UAAWC,IAAQW,gBAEpB,6BACI,8CAEKL,GACD,6BAAK,0BAAMM,cAzBF,WACrBL,GAAY,KAwBK,UAAL,IAA6D,wCAAcC,IAG3EF,GACA,6BAAK,2BAAOO,SArBL,SAACC,GACpBL,EAAUK,EAAEC,cAAcC,QAoBwBC,WAAW,EAAMC,OAzB5C,WACvBX,GAAY,IAwBqFS,MAAOR,MAIpG,6BACI,uCACA,4BAAQT,UAAS,UAAKC,IAAQmB,IAAb,YAAoBnB,IAAQoB,aAA7C,OACA,4BAAQrB,UAAS,UAAKC,IAAQmB,IAAb,YAAoBnB,IAAQqB,YAA7C,aC3CDC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3022e77.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperDevelop\":\"Develop_wrapperDevelop__3tML0\",\"btn\":\"Develop_btn__1nRe7\",\"btnSuccess\":\"Develop_btnSuccess__15ewL\",\"btnDelete\":\"Develop_btnDelete__2hRSu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\"};","import React from 'react';\nimport classes from './Header.module.scss'\n\nconst Header = () => {\n    return (\n        <header className={classes.header}>\n            <div>logo</div>\n            <nav>\n                <ul>\n                    <li>Home</li>\n                </ul>\n            </nav>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport classes from './Footer.module.scss';\n\nconst Footer = () => {\n    return (\n        <footer className={classes.footer}>\n            FOOTER\n        </footer>\n    );\n}\n\nexport default Footer;","import React, {useEffect, useState} from 'react';\nimport classes from './Develop.module.scss';\n\nconst Develop = () => {\n\n    // let array = useState(false); // это значение не храниться локально, тк. функция не имеет стэйта,\n    // значение хранится на стороне реакта // array = тут только одно значение и одна функция т.е. 2 элемента\n    // let editMode = array[0]; // здесь начальное значение, те false, который мы задали на строке выше\n    //  let setEditMode = array[1]; // здесь функция, которая изменяет первое одиночное значение\n\n    // деструктурированное присваивание\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(\"start\");  // если нужно, то добавляем ещё один стэйт\n    // получаем два разных состояния, которые меняются независимо друг от друга\n\n    useEffect( () => {\n        //setStatus(props.status);\n    }, [] );  // [] -  реакт, запускай useEffect не всегда, а только тогда, когда компонента вмонтировалась первый раз\n    // вообще не правильно закидывать пустой массив в useEffect, нужно чтобы он срабатывал, когда ещё приходят пропсы\n    // указываем в массивые зависимость от props.status те. [props.status],\n    // таким образом, елси при очередной перерисовки, props.status будет другим, то запустится useEffect\n\n    const activateEditMode = () => {\n        setEditMode(true); // setEditMode - это второе значение, которым является функция\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n    }\n\n    const onStatusChange = (e: any) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    // методов жизненного цикла в хуках нет\n\n    // =============================================================================================\n\n\n\n    return (\n        <div className={classes.wrapperDevelop}>\n\n            <div>\n                <h2>Change status</h2>\n                {\n                    !editMode &&\n                    <div><span onDoubleClick={ activateEditMode } >botton</span> <div>status: {status}</div></div>\n                }\n                {\n                    editMode &&\n                    <div><input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode } value={status} /></div>\n                }\n            </div>\n\n            <div>\n                <h2>Counter</h2>\n                <button className={`${classes.btn} ${classes.btnSuccess}`}>Add</button>\n                <button className={`${classes.btn} ${classes.btnDelete}`}>Remove</button>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Develop;","import React from 'react';\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport Develop from \"./components/Develop/Develop\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Develop />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}